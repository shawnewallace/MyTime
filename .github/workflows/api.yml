name: Build API

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  DOTNET_VERSION: '8.0.x'

jobs:
  build-and-test-api:
    name: build-and-test-${{matrix.os}}

    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]

    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    - name: Restore dependencies
      run: dotnet restore
    - name: Build
      run: dotnet build --no-restore
    - name: Test
      run: dotnet test --no-build --verbosity normal
      
  publish-api:
    runs-on: windows-latest
    needs: build-and-test-api
    
    steps:
    - name: Checkout
      uses: actions/checkout@master
      
    - name: Set Up .NET Core
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Build API
      run: dotnet build src/MyTime.Api/MyTime.Api.csproj --configuration Release
      
    - name: Stage API
      run: dotnet publish src/MyTime.Api/MyTime.Api.csproj -c Release -o "${{env.DOTNET_ROOT}}/myapp"
      
    - name: Publish API to Dev
      id: deploy-to-webapp
      uses: azure/webapps-deploy@v2
      with:
        app-name: 'mytimedev'
        slot-name: 'Production'
        publish-profile: ${{ secrets.AZUREAPPSERVICE_PUBLISHPROFILE_AB74774897A246E09B0C790B0ED901E6 }}
        package: "${{env.DOTNET_ROOT}}/myapp"
      
      
    - name: Install EF
      run: |
        dotnet new tool-manifest
        dotnet tool install dotnet-ef
        
    - name: Generate SQL Deployment Script
      run:  dotnet ef migrations script --project src/MyTime.Api/MyTime.Api.csproj --output "${{env.DOTNET_ROOT}}/sql/sql-script.sql" --idempotent
      
    - name: Deploy DB Changes
      uses: Azure/sql-action@v2.2
      with:
        connection-string: ${{ secrets.CONNECTION_STRING }}
        path: "${{env.DOTNET_ROOT}}/sql/sql-script.sql"

  publish-web-dev:
    runs-on: ubuntu-latest
    needs: build-and-test-api

    steps:
    - name: checkout
      uses: actions/checkout@master
      
    - name: Install Node.js
      uses: actions/setup-node@v2.5.2
      with:
        node-version: 16.x
        
    - name: Add React Scripts with Yarn
      run: yarn add react-scripts
      working-directory: "./src/timesheet-app"
        
    - name: Yarn install
      run: |
        yarn add --dev eslint-formatter-fix-dry-run
        yarn install
      working-directory: "./src/timesheet-app"
      
    - name: DEVELOPMENT Build
      run: yarn run build:production
      working-directory: "./src/timesheet-app"
      env:
        CI: false
        REACT_APP_ENV: development

    - name: Azure Static Web Apps Deploy
      uses: Azure/static-web-apps-deploy@v1
      with:
        azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN_KIND_MEADOW_00D34130F }}
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        # Action to perform
        action: "upload"
        # Directory location of the application source code
        app_location: "./src/timesheet-app/build/"
        # Custom command for Oryx to run when building Azure Functions source code
        # api_build_command: # optional
        # Directory location of the Azure Functions source code
        # api_location: 
        # Identical in use to output_location
        app_artifact_location: "./src/timesheet-app/build/"
        # Directory location of the compiled application code after building
        # output_location: # optional
        # Custom command for Oryx to run when building application source code
        # app_build_command: # optional
        # Directory location where the routes.json file can be found in the source code
        # routes_location: # optional
        # Skips the build step for the application source code if set to true.
        skip_app_build: true
